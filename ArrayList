import java.util.Scanner;

class CustomArray {
    private int[] array;
    private int size;
    private int count;

    public CustomArray(int size) {
        this.size = size;
        this.array = new int[size];
        this.count = 0;
    }

    public void add(int data) {
        if (count < size) {
            array[count++] = data;
            System.out.println("New element added");
        } else {
            System.out.println("Array is full. Cannot add more elements.");
        }
    }

    public void viewArray() {
        if (count == 0) {
            System.out.println("Array is empty ");
            return;
        }

        System.out.print("Array: ");
        for (int i = 0; i < count; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    public void remove(int index) {
        if (index < 0 || index >= count) {
            System.out.println("Invalid index");
            return;
        }

        for (int i = index; i < count - 1; i++) {
            array[i] = array[i + 1];
        }
        array[count - 1] = 0;
        count--;
        System.out.println("Element removed successfully");
    }

    public void search(int data) {
        for (int i = 0; i < count; i++) {
            if (array[i] == data) {
                System.out.println("Element " + data + " found at index " + i + "");
                return;
            }
        }
        System.out.println("Element " + data + " not found");
    }

    public void ascendingSort() {
        if (count > 1) {
            for (int i = 0; i < count - 1; i++) {
                for (int j = i + 1; j < count; j++) {
                    if (array[i] > array[j]) {
                        int temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                }
            }
            System.out.println("Array sorted in ascending order");
        } else {
            System.out.println("Sorting not possible. Array has less than 2 elements");
        }
    }

    public void descendingSort() {
        if (count > 1) {
            for (int i = 0; i < count - 1; i++) {
                for (int j = i + 1; j < count; j++) {
                    if (array[i] < array[j]) {
                        int temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                }
            }
            System.out.println("Array sorted in descending order");
        } else {
            System.out.println("Sorting not possible. Array has less than 2 elements");
        }
    }

    public void edit(int index, int data) {
        if (index < 0 || index >= count) {
            System.out.println("Invalid index");
            return;
        }

        array[index] = data;
        System.out.println("Element at index " + index + " changed to " + data + "");
    }
}

public class ArrayList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the desired size for your array: ");
        int size = scanner.nextInt();
        CustomArray customArray = new CustomArray(size);

        boolean isRunning = true;
        while (isRunning) {
            System.out.println("\nOperations:");
            System.out.println("1. Add");
            System.out.println("2. Ascending Sort");
            System.out.println("3. Descending Sort");
            System.out.println("4. Search");
            System.out.println("5. Edit");
            System.out.println("6. Remove");
            System.out.println("7. View Array");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter an element to add: ");
                    int data = scanner.nextInt();
                    customArray.add(data);
                    break;
                case 2:
                    customArray.ascendingSort();
                    break;
                case 3:
                    customArray.descendingSort();
                    break;
                case 4:
                    System.out.print("Enter an element to search: ");
                    int searchElement = scanner.nextInt();
                    customArray.search(searchElement);
                    break;
                case 5:
                    customArray.viewArray();
                    System.out.print("Enter the index to edit: ");
                    int editIndex = scanner.nextInt();
                    System.out.print("Enter the new element: ");
                    int newData = scanner.nextInt();
                    customArray.edit(editIndex, newData);
                    break;
                case 6:
                    customArray.viewArray();
                    System.out.print("Enter the index to remove: ");
                    int removeIndex = scanner.nextInt();
                    customArray.remove(removeIndex);
                    break;
                case 7:
                    customArray.viewArray();
                    break;
                case 8:
                    isRunning = false;
                    System.out.println("Exiting the program. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please select a valid operation.");
                    break;
            }
        }

        scanner.close();
    }
}
